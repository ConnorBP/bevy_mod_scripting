

imports = """
use bevy::{prelude::*,asset::HandleId};
use bevy::math::*;
use std::sync::Weak;
use std::ops::*;
use phf::{phf_map, Map};
use crate::LuaFile;
use crate::LuaRefBase;
use crate::ReflectPtr;
use crate::Script;
use crate::ScriptCollection;
use crate::LuaRef;
use crate::get_type_data;
use crate::{LuaComponent,LuaResource,LuaWorld};
use std::sync::Arc;
use parking_lot::RwLock;
use crate::util::impl_tealr_type;
use num_traits::cast::ToPrimitive;
use bevy_mod_scripting_derive::{impl_lua_newtypes,replace};
use tealr::{mlu::{mlua,mlua::{prelude::*,Error,MetaMethod,Value}},create_union_mlua};
"""

external_types = ["LuaComponent","LuaResource","LuaWorld"]

primitives = ["usize","isize","f32","f64","u128","u64","u32","u16","u8","i128","i64","i32","i16","i8"]



# # BEVY_PBR
# [[types]]
# type="AlphaMode"
# source="bevy_pbr"

# # BEVY_RENDER
# [[types]]
# type="DepthCalculation"
# source="bevy_render"

# [[types]]
# type="CameraRenderGraph"
# source="bevy_render"
# wrapper_type="Ref"

# # BEVY_UTILS
# [[types]]
# type="Uuid"
# source="uuid"

# # BEVY_ASSET
# [[types]]
# type="HandleId"
# source="bevy_asset"


# BEVY_ECS 
[[types]]
type="Entity"
source="bevy_ecs"

# # GLAM

[[types]]
type="Vec2"
source="glam"
lua_methods=[
    "(MetaMethod::Index) (s=LuaVec2)=> {|_,s,idx: usize| {Ok(s.clone()[idx-1])}}",
    "mut (MetaMethod::NewIndex) (n=f32) => {|_,s,(idx,val): (usize,($n))| {Ok(s.val_mut(|s| s[idx-1] = val))}}"
]
import_path="glam::f32::vec2::Vec2"


[[types]]
type="Vec3"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaVec3),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=f32))
    """
]
import_path="glam::f32::vec3::Vec3"


[[types]]
type="Vec4"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaVec4),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=f32))
    """
]
import_path="glam::f32::sse2::vec4::Vec4"

[[types]]
type="DVec2"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaDVec2),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=f64))
    """
]
import_path="glam::f64::dvec2::DVec2"

[[types]]
type="DVec3"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaDVec3),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=f64))
    """
]
import_path="glam::f64::dvec3::DVec3"

[[types]]
type="DVec4"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaDVec4),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=f64))
    """
]
import_path="glam::f64::dvec4::DVec4"

[[types]]
type="IVec2"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaIVec2),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=i32))
    """
]
import_path="glam::i32::ivec2::IVec2"

[[types]]
type="IVec3"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaIVec3),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=i32))
    """
]
import_path="glam::i32::ivec3::IVec3"

[[types]]
type="IVec4"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaIVec4),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=i32))
    """
]
import_path="glam::i32::ivec4::IVec4"

[[types]]
type="UVec2"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaUVec2),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=u32))
    """
]
import_path="glam::u32::uvec2::UVec2"

[[types]]
type="UVec3"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaUVec3),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=u32))
    """
]
import_path="glam::u32::uvec3::UVec3"

[[types]]
type="UVec4"
source="glam"
derive_flags=[
    """
    Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaUVec4),
        LuaVec2 -> mut (MetaMethod::NewIndex) (n=u32))
    """
]
import_path="glam::u32::uvec4::UVec4"

[[types]]
type="Mat3"
source="glam"
lua_methods=[
"""    
mut (MetaMethod::Index) (s=LuaMat3,b=Mat3,v=LuaVec3) => {|_,s,idx : usize| {
    match s {
        ($s)::Owned(ref mut v, ref valid) => {
            Ok(($v)::Ref(LuaRef{
                root: LuaRefBase::LuaOwned{valid: Arc::downgrade((valid))},
                r: ReflectPtr::Mut(v.col_mut(idx-1)),
                path: None
            }))
        },
        ($s)::Ref(ref mut r) => {
            r.get_mut(|s,r| {
                Ok(($v)::Ref(LuaRef{
                    root: r.root.clone(),
                    r: ReflectPtr::Mut(s.downcast_mut::<($b)>().unwrap().col_mut(idx-1)),
                    path: None
                })) 
            })
        }
    }
}}
"""
]
import_path="glam::f32::mat3::Mat3"

[[types]]
type="Mat4"
source="glam"
derive_flags=[
    "Copy(LuaMat3 -> mut (MetaMethod::Index) (s=LuaMat4,b=Mat4,v=LuaVec4))"
]
import_path="glam::f32::sse2::mat4::Mat4"

[[types]]
type="DMat3"
source="glam"
derive_flags=[
    "Copy(LuaMat3 -> mut (MetaMethod::Index) (s=LuaDMat3,b=DMat3,v=LuaDVec3))"
]
import_path="glam::f64::dmat3::DMat3"

[[types]]
type="DMat4"
source="glam"
derive_flags=[
    "Copy(LuaMat3 -> mut (MetaMethod::Index) (s=LuaDMat4,b=DMat4,v=LuaDVec4))"
]
import_path="glam::f64::dmat4::DMat4"

[[types]]
type="Quat"
source="glam"
import_path="glam::f32::sse2::quat::Quat"

[[types]]
type="DQuat"
source="glam"
import_path="glam::f64::dquat::DQuat"

[[types]]
type="EulerRot"
source="glam"
import_path="glam::euler::EulerRot"