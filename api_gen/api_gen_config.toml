imports = """
#![allow(unused_variables,unused_parens)]
use bevy::{prelude::*};
use bevy::math::*;
use std::sync::Weak;
use std::ops::*;
use phf::{phf_map, Map};
use crate::LuaFile;
use crate::LuaRefBase;
use crate::ReflectPtr;
use crate::Script;
use crate::ScriptCollection;
use crate::LuaRef;
use crate::get_type_data;
use crate::{LuaComponent,LuaResource,LuaWorld};
use std::sync::Arc;
use parking_lot::RwLock;
use crate::util::impl_tealr_type;
use num_traits::cast::ToPrimitive;
use bevy_mod_scripting_derive::{impl_lua_newtypes,replace};
use tealr::{mlu::{mlua,mlua::{prelude::*,Error,MetaMethod,Value}},create_union_mlua};
"""

external_types = ["LuaComponent","LuaResource","LuaWorld"]

primitives = ["usize","isize","f32","f64","u128","u64","u32","u16","u8","i128","i64","i32","i16","i8"]



[[types]]
type="Entity"
source="bevy_ecs"

 [[types]]
 type="Vec2"
 source="glam"
 lua_methods=[
     "(MetaMethod::Index) (s=LuaVec2)=> {|_,s,idx: usize| {Ok(s.inner()[idx-1])}}",
     "mut (MetaMethod::NewIndex) (n=f32) => {|_,s,(idx,val): (usize,($n))| {Ok(s.val_mut(|s| s[idx-1] = val))}}"
 ]

 [[types]]
 type="Vec3"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaVec3),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=f32))
     """
 ]

 [[types]]
 type="Vec4"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaVec4),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=f32))
     """
 ]

 [[types]]
 type="DVec2"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaDVec2),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=f64))
     """
 ]

 [[types]]
 type="DVec3"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaDVec3),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=f64))
     """
 ]

 [[types]]
 type="DVec4"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaDVec4),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=f64))
     """
 ]

 [[types]]
 type="IVec2"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaIVec2),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=i32))
     """
 ]

 [[types]]
 type="IVec3"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaIVec3),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=i32))
     """
 ]

 [[types]]
 type="IVec4"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaIVec4),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=i32))
     """
 ]

 [[types]]
 type="UVec2"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaUVec2),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=u32))
     """
 ]

 [[types]]
 type="UVec3"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaUVec3),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=u32))
     """
 ]

 [[types]]
 type="UVec4"
 source="glam"
 derive_flags=[
     """
     Copy(LuaVec2 -> (MetaMethod::Index) (s=LuaUVec4),
         LuaVec2 -> mut (MetaMethod::NewIndex) (n=u32))
     """
 ]

[[types]]
type="Mat3"
source="glam"
lua_methods=[
    """    
    mut (MetaMethod::Index) (s=LuaMat3,b=Mat3,v=LuaVec3) => {|_,s,idx : usize| {
        match s {
            ($s)::Owned(ref mut v, ref valid) => {
                Ok(($v)::Ref(LuaRef{
                    root: LuaRefBase::LuaOwned{valid: Arc::downgrade((valid))},
                    r: ReflectPtr::Mut(v.col_mut(idx-1)),
                    path: None
                }))
            },
            ($s)::Ref(ref mut r) => {
                r.get_mut(|s,r| {
                    Ok(($v)::Ref(LuaRef{
                        root: r.root.clone(),
                        r: ReflectPtr::Mut(s.downcast_mut::<($b)>().unwrap().col_mut(idx-1)),
                        path: None
                    })) 
                })
            }
        }
    }}
    """
]

 [[types]]
 type="Mat4"
 source="glam"
 derive_flags=[
     "Copy(LuaMat3 -> mut (MetaMethod::Index) (s=LuaMat4,b=Mat4,v=LuaVec4))"
 ]

 [[types]]
 type="DMat3"
 source="glam"
 derive_flags=[
     "Copy(LuaMat3 -> mut (MetaMethod::Index) (s=LuaDMat3,b=DMat3,v=LuaDVec3))"
 ]

 [[types]]
 type="DMat4"
 source="glam"
 derive_flags=[
     "Copy(LuaMat3 -> mut (MetaMethod::Index) (s=LuaDMat4,b=DMat4,v=LuaDVec4))"
 ]

 [[types]]
 type="Quat"
 source="glam"

 [[types]]
 type="DQuat"
 source="glam"

 [[types]]
 type="EulerRot"
 source="glam"
 wrapper_type="NonReflect"